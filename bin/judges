#!/usr/bin/env ruby

# SPDX-FileCopyrightText: Copyright (c) 2024-2025 Yegor Bugayenko
# SPDX-License-Identifier: MIT

$stdout.sync = true

require 'factbase'
require 'gli'
require 'loog'
require 'tago'
require 'time'
require 'total'
require_relative '../lib/judges'

Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8

class JudgesGLI extend GLI::App

  def self.run_it(cmd, ruby)
    cmd.action do |global, options, args|
      require_relative "../lib/judges/commands/#{ruby}"
      start = Time.now
      @@loog.debug("Running '#{ruby}' command...")
      Object.const_get("Judges::#{ruby.capitalize}").new(@@loog).run(options, args)
      @@loog.debug("Command '#{ruby}' finished in #{start.ago}")
    end
  end

  @@loog = Loog::REGULAR

  program_desc("Automated executor of judges for a factbase (#{Judges::VERSION})")

  version(Judges::VERSION)

  synopsis_format(:full)

  subcommand_option_handling(:normal)

  desc 'Make it more verbose, logging as much as possible'
  switch([:v, :verbose])

  pre do |global, command, options, args|
    if global[:verbose]
      @@loog = Loog::VERBOSE
    end
    @@loog.debug("Judges #{Judges::VERSION}")
    @@loog.debug("Factbase #{Factbase::VERSION}")
    @@loog.debug("Ruby: #{RUBY_VERSION}-p#{RUBY_PATCHLEVEL}")
    @@loog.debug("Current directory: #{Dir.getwd}")
    @@loog.debug("Time: #{Time.now.utc.iso8601}")
    @@loog.debug("Total memory: #{Total::Mem.new.bytes / (1024 * 1024)}Mb")
    true
  end

  desc 'Update the factbase by passing all judges one by one'
  command :update do |c|
    c.desc 'Options to pass to every judge'
    c.flag([:o, :option], multiple: true, arg_name: '<key=value>')
    c.desc 'File with options, one k=v pair per line'
    c.flag([:'options-file'])
    c.desc 'Name of the judge to run (directory name)'
    c.flag([:judge], multiple: true)
    c.desc 'The location of a Ruby library (directory with .rb files to include)'
    c.flag([:lib])
    c.desc 'Maximum time in seconds to spend on every judge (forcefully terminate if over time)'
    c.flag([:'timeout'], default_value: 30, type: Integer)
    c.desc 'Maximum number of update cycles to run'
    c.flag([:'max-cycles'], default_value: 8, type: Integer)
    c.desc 'Stay quiet even if some judges fail'
    c.switch([:q, :quiet], default_value: false)
    c.desc 'Place a summarization fact into the factbase'
    c.switch([:summary], default_value: false)
    c.desc 'Use default logging facility'
    c.switch([:log], default_value: true)
    run_it(c, 'update')
  end

  desc 'Evaluate a single Ruby expression on the factbase'
  command :eval do |c|
    run_it(c, 'eval')
  end

  desc 'Join two factbases'
  command :join do |c|
    run_it(c, 'join')
  end

  desc 'Import YAML into a factbase'
  command :import do |c|
    run_it(c, 'import')
  end

  desc 'Remove the facts that are too old'
  command :trim do |c|
    c.desc 'Only the facts that match the expression are deleted'
    c.flag([:query], default_value: '(never)')
    run_it(c, 'trim')
  end

  desc 'Print the factbase into a human-readable format (YAML, JSON, etc.)'
  command :print do |c|
    c.desc 'Output format (xml, json, or yaml)'
    c.flag([:format], default_value: 'yaml')
    c.desc 'Generate output name of the file automatically'
    c.switch([:auto], default_value: false)
    c.desc 'The title of the document to use'
    c.flag([:title], default_value: 'summary')
    c.desc 'Only the facts that match the expression are printed'
    c.flag([:query], default_value: '(always)')
    c.desc 'Comma separated list of columns to show in HTML output (no spaces!)'
    c.flag([:columns], default_value: 'when,what')
    c.desc 'Comma separated list of hidden columns, not to be rendered (no spaces!)'
    c.flag([:hidden], default_value: '_id,_time,_version,_job')
    c.desc 'Print even if target file already exists and is older than the factbase'
    c.switch([:force], default_value: false)
    run_it(c, 'print')
  end

  desc 'Inspect the factbase and print all its possible meta-data'
  command :inspect do |c|
    run_it(c, 'inspect')
  end

  desc 'Run automated tests for all judges'
  command :test do |c|
    c.desc 'Options to pass to every judge (may be overwritten by YAML)'
    c.flag([:o, :option], multiple: true, arg_name: '<key=value>')
    c.desc 'Categories of tests to disable'
    c.flag([:disable], multiple: true)
    c.desc 'Categories of tests to enable'
    c.flag([:enable], multiple: true)
    c.desc 'Name of the judge to run (directory name)'
    c.flag([:judge], multiple: true)
    c.desc 'How many times to run?'
    c.flag([:runs], type: Integer)
    c.desc 'The location of a Ruby library (directory with .rb files to include)'
    c.flag([:lib])
    c.desc 'Stay quiet even if some tests fail or simply no tests executed?'
    c.switch([:quiet], default_value: false)
    c.desc 'Use default logging facility'
    c.switch([:log], default_value: true)
    run_it(c, 'test')
  end

  desc 'Push the factbase to the server and unlock it over there'
  command :push do |c|
    c.desc 'Authentication token'
    c.flag([:token])
    c.desc 'The IP/hostname of the server'
    c.flag([:host], default_value: 'api.zerocracy.com')
    c.desc 'The TCP port number of the server'
    c.flag([:port], default_value: 443, type: Integer)
    c.desc 'Connection and read time in seconds'
    c.flag([:timeout], default_value: 30, type: Integer)
    c.desc 'Shall SSL be used?'
    c.switch([:ssl], default_value: true)
    c.desc 'A unique name to use for a lock/unlock'
    c.flag([:owner], default_value: 'default', type: String)
    c.desc 'Supplementary meta information about the upload (key:value)'
    c.flag([:meta], type: String, multiple: true)
    c.desc 'How many times to retry'
    c.flag([:retries], type: Integer, default_value: 3)
    c.desc 'Turn on the package compression'
    c.switch([:zip], default_value: true)
    run_it(c, 'push')
  end

  desc 'Pull the factbase from the server and lock it over there'
  command :pull do |c|
    c.desc 'Authentication token'
    c.flag([:token])
    c.desc 'How many seconds to wait'
    c.flag([:wait], default_value: 10 * 60, arg_name: '<seconds>', type: Integer)
    c.desc 'The IP/hostname of the server'
    c.flag([:host], default_value: 'api.zerocracy.com')
    c.desc 'The TCP port number of the server'
    c.flag([:port], default_value: 443, type: Integer)
    c.desc 'Connection and read time in seconds'
    c.flag([:timeout], default_value: 30, type: Integer)
    c.desc 'Shall SSL be used?'
    c.switch([:ssl], default_value: true)
    c.desc 'A unique name to use for a lock/unlock'
    c.flag([:owner], default_value: 'default', type: String)
    c.desc 'How many times to retry'
    c.flag([:retries], type: Integer, default_value: 3)
    run_it(c, 'pull')
  end
end

exit JudgesGLI.run(ARGV) if ENV['GLI_TESTING'].nil?
