#!/usr/bin/env ruby

# Copyright (c) 2024 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

$stdout.sync = true

require 'gli'
require 'loog'
require 'factbase'

Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8

class App
  extend GLI::App

  ver = '0.0.30'

  loog = Loog::REGULAR

  program_desc('Automated executor of judges for a factbase')

  version(ver)

  synopsis_format(:full)

  subcommand_option_handling(:normal)

  desc 'Make it more verbose, logging as much as possible'
  switch([:v, :verbose])

  pre do |global, command, options, args|
    if global[:verbose]
      loog = Loog::VERBOSE
    end
    loog.debug("judges #{ver}")
    true
  end

  desc 'Update the factbase by passing all judges one by one'
  command :update do |c|
    c.desc 'Options to pass to every judge'
    c.flag([:o, :option], multiple: true, arg_name: '<key=value>')
    c.desc 'The location of a Ruby library (directory with .rb files to include)'
    c.flag([:lib])
    c.desc 'Maximum number of update cycles to run'
    c.flag([:'max-cycles'], default_value: 8, type: Integer)
    c.desc 'Stay quiet even if some judges fail'
    c.switch([:q, :quiet], default_value: false)
    c.action do |global, options, args|
      require_relative '../lib/judges/commands/update'
      Judges::Update.new(loog).run(options, args)
    end
  end

  desc 'Evaluate a single Ruby expression on the factbase'
  command :eval do |c|
    c.action do |global, options, args|
      require_relative '../lib/judges/commands/eval'
      Judges::Eval.new(loog).run(options, args)
    end
  end

  desc 'Join two factbases'
  command :join do |c|
    c.action do |global, options, args|
      require_relative '../lib/judges/commands/join'
      Judges::Join.new(loog).run(options, args)
    end
  end

  desc 'Import YAML into a factbase'
  command :import do |c|
    c.action do |global, options, args|
      require_relative '../lib/judges/commands/import'
      Judges::Import.new(loog).run(options, args)
    end
  end

  desc 'Remove the facts that are too old'
  command :trim do |c|
    c.desc 'Only the facts that match the expression are deleted'
    c.flag([:query])
    c.desc 'Remove facts that are older than X days'
    c.flag([:days], type: Integer)
    c.action do |global, options, args|
      require_relative '../lib/judges/commands/trim'
      Judges::Trim.new(loog).run(options, args)
    end
  end

  desc 'Print the factbase into a human-readable format (YAML, JSON, etc.)'
  command :print do |c|
    c.desc 'Output format (xml, json, or yaml)'
    c.flag([:format], default_value: 'yaml')
    c.desc 'Generate output name of the file automatically'
    c.switch([:auto], default_value: false)
    c.desc 'Only the facts that match the expression are printed'
    c.flag([:query], default_value: '()')
    c.desc 'Print even if target file already exists and is older than the factbase'
    c.switch([:force], default_value: false)
    c.action do |global, options, args|
      require_relative '../lib/judges/commands/print'
      Judges::Print.new(loog).run(options, args)
    end
  end

  desc 'Inspect the factbase and print all its possible meta-data'
  command :inspect do |c|
    c.action do |global, options, args|
      require_relative '../lib/judges/commands/inspect'
      Judges::Inspect.new(loog).run(options, args)
    end
  end

  desc 'Run automated tests for all judges'
  command :test do |c|
    c.desc 'Name of the test pack to run'
    c.flag([:pack], multiple: true)
    c.desc 'The location of a Ruby library (directory with .rb files to include)'
    c.flag([:lib])
    c.desc 'Stay quiet even if some tests fail or simply no tests executed?'
    c.switch([:quiet], default_value: false)
    c.action do |global, options, args|
      require_relative '../lib/judges/commands/test'
      Judges::Test.new(loog).run(options, args)
    end
  end
end

exit App.run(ARGV)
