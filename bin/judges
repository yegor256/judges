#!/usr/bin/env ruby

# SPDX-FileCopyrightText: Copyright (c) 2024-2025 Yegor Bugayenko
# SPDX-License-Identifier: MIT

$stdout.sync = true

require 'gli'
require 'loog'
require 'tago'
require 'time'
require 'total'
require_relative '../lib/judges'

Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8

class JudgesGLI extend GLI::App

  @@args = ARGV.dup

  def self.run_it(cmd, ruby)
    cmd.action do |global, options, args|
      require_relative "../lib/judges/commands/#{ruby}"
      start = Time.now
      @@loog.debug("Running '#{ruby}' command...")
      Object.const_get("Judges::#{ruby.capitalize}").new(@@loog).run(options, args)
      @@loog.debug("Command '#{ruby}' completed in #{start.ago}")
    end
  end

  @@loog = Loog::REGULAR

  program_desc("Automated executor of judges for a factbase (#{Judges::VERSION})")

  version(Judges::VERSION)

  synopsis_format(:full)

  subcommand_option_handling(:normal)

  desc 'Enable verbose mode with maximum logging'
  switch([:v, :verbose])
  desc 'Specify Factbase version to use'
  flag([:factbase], type: String)
  desc 'Echo the entire command line'
  switch([:echo])

  pre do |global, command, options, args|
    if global[:verbose]
      @@loog = Loog::VERBOSE
    end
    if global[:echo]
      @@loog.info("+ #{File.absolute_path($0)} #{@@args.join(' ')}")
    end
    @@loog.debug("Judges #{Judges::VERSION}")
    if global[:factbase]
      ver = global[:factbase]
      @@loog.debug("Factbase version to be used: '#{ver}' (set via --factbase)")
      gem 'factbase', ver
    end
    require 'factbase'
    @@loog.debug("Factbase #{Factbase::VERSION}")
    @@loog.debug("Ruby: #{RUBY_VERSION}-p#{RUBY_PATCHLEVEL}")
    @@loog.debug("Current directory: #{Dir.getwd}")
    @@loog.debug("Time: #{Time.now.utc.iso8601}")
    @@loog.debug("Total memory: #{Total::Mem.new.bytes / (1024 * 1024)}Mb")
    true
  end

  desc 'Print version of the tool'
  command :version do |c|
    c.action do
      @@loog.info(Judges::VERSION)
    end
  end

  desc 'Update the factbase by executing all judges sequentially'
  command :update do |c|
    c.desc 'Options to pass to each judge'
    c.flag([:o, :option], multiple: true, arg_name: '<key=value>')
    c.desc 'File containing options, one key=value pair per line'
    c.flag([:'options-file'])
    c.desc 'Name of the judge to run (directory name)'
    c.flag([:judge], multiple: true)
    c.desc 'Location of a Ruby library (directory with .rb files to include)'
    c.flag([:lib])
    c.desc 'Shuffle judges, except those starting with the specified prefix'
    c.flag([:shuffle], default_value: '')
    c.desc 'Prioritize a judge to run before all others'
    c.flag([:boost], multiple: true)
    c.desc 'Demote a judge to run after all others'
    c.flag([:demote], multiple: true)
    c.desc 'Maximum time in seconds for the entire update cycle'
    c.flag([:lifetime], default_value: 300, type: Integer)
    c.desc 'Maximum time in seconds for each judge (forcefully terminates if exceeded)'
    c.flag([:timeout], default_value: 30, type: Integer)
    c.desc 'Maximum number of update cycles to run'
    c.flag([:'max-cycles'], default_value: 8, type: Integer)
    c.desc 'Suppress errors even when judges fail'
    c.switch([:q, :quiet], default_value: false)
    c.desc 'Stop processing immediately after the first error'
    c.switch([:'fail-fast'], default_value: false)
    c.desc 'Add a summary fact to the factbase'
    c.flag([:summary], must_match: %w[off add append], default_value: 'off')
    c.desc 'Use default logging facility'
    c.switch([:log], default_value: true)
    c.desc 'Expect at least one judge to be used (fail if none are used)'
    c.switch([:'expect-judges'], default_value: true)
    run_it(c, 'update')
  end

  desc 'Evaluate a single Ruby expression against the factbase'
  command :eval do |c|
    c.desc 'Use default logging facility'
    c.switch([:log], default_value: true)
    run_it(c, 'eval')
  end

  desc 'Join two factbases'
  command :join do |c|
    run_it(c, 'join')
  end

  desc 'Import YAML into a factbase'
  command :import do |c|
    c.desc 'Use default logging facility'
    c.switch([:log], default_value: true)
    run_it(c, 'import')
  end

  desc 'Remove outdated facts from the factbase'
  command :trim do |c|
    c.desc 'Delete only facts matching the specified expression'
    c.flag([:query], default_value: '(never)')
    run_it(c, 'trim')
  end

  desc 'Convert the factbase to a human-readable format (YAML, JSON, etc.)'
  command :print do |c|
    c.desc 'Output format (xml, json, or yaml)'
    c.flag([:format], default_value: 'yaml')
    c.desc 'Automatically generate the output filename'
    c.switch([:auto], default_value: false)
    c.desc 'Document title to use'
    c.flag([:title], default_value: 'summary')
    c.desc 'Print only facts matching the specified expression'
    c.flag([:query], default_value: '(always)')
    c.desc 'Comma-separated list of columns to display in HTML output (no spaces)'
    c.flag([:columns], default_value: 'when,what')
    c.desc 'Comma-separated list of columns to hide from rendering (no spaces)'
    c.flag([:hidden], default_value: '_id,_time,_version,_job')
    c.desc 'Force printing even if the target file exists and is older than the factbase'
    c.switch([:force], default_value: false)
    run_it(c, 'print')
  end

  desc 'Inspect the factbase and display all available metadata'
  command :inspect do |c|
    run_it(c, 'inspect')
  end

  desc 'Run automated tests for all judges'
  command :test do |c|
    c.desc 'Options to pass to each judge (may be overridden by YAML)'
    c.flag([:o, :option], multiple: true, arg_name: '<key=value>')
    c.desc 'Categories of tests to disable'
    c.flag([:disable], multiple: true)
    c.desc 'Categories of tests to enable'
    c.flag([:enable], multiple: true)
    c.desc 'Name of the judge to run (directory name)'
    c.flag([:judge], multiple: true)
    c.desc 'Number of times to run the tests'
    c.flag([:runs], type: Integer)
    c.desc 'Location of a Ruby library (directory with .rb files to include)'
    c.flag([:lib])
    c.desc 'Suppress output even if tests fail or none are executed'
    c.switch([:quiet], default_value: false)
    c.desc 'Use default logging facility'
    c.switch([:log], default_value: true)
    run_it(c, 'test')
  end

  desc 'Push the factbase to the server and unlock it remotely'
  command :push do |c|
    c.desc 'Authentication token'
    c.flag([:token])
    c.desc 'Server IP/hostname'
    c.flag([:host], default_value: 'api.zerocracy.com')
    c.desc 'Server TCP port number'
    c.flag([:port], default_value: 443, type: Integer)
    c.desc 'Connection and read timeout in seconds'
    c.flag([:timeout], default_value: 30, type: Integer)
    c.desc 'Enable SSL connection'
    c.switch([:ssl], default_value: true)
    c.desc 'Unique identifier for lock/unlock operations'
    c.flag([:owner], default_value: 'default', type: String)
    c.desc 'Additional metadata for the upload (key:value format)'
    c.flag([:meta], type: String, multiple: true)
    c.desc 'Number of retry attempts'
    c.flag([:retries], type: Integer, default_value: 3)
    c.desc 'Enable package compression'
    c.switch([:zip], default_value: true)
    run_it(c, 'push')
  end

  desc 'Pull the factbase from the server and lock it remotely'
  command :pull do |c|
    c.desc 'Authentication token'
    c.flag([:token])
    c.desc 'Maximum wait time in seconds'
    c.flag([:wait], default_value: 10 * 60, arg_name: '<seconds>', type: Integer)
    c.desc 'Server IP/hostname'
    c.flag([:host], default_value: 'api.zerocracy.com')
    c.desc 'Server TCP port number'
    c.flag([:port], default_value: 443, type: Integer)
    c.desc 'Connection and read timeout in seconds'
    c.flag([:timeout], default_value: 30, type: Integer)
    c.desc 'Enable SSL connection'
    c.switch([:ssl], default_value: true)
    c.desc 'Unique identifier for lock/unlock operations'
    c.flag([:owner], default_value: 'default', type: String)
    c.desc 'Number of retry attempts'
    c.flag([:retries], type: Integer, default_value: 3)
    run_it(c, 'pull')
  end

  desc 'Download a durable from the server by ID'
  command :download do |c|
    c.desc 'Authentication token'
    c.flag([:token])
    c.desc 'Server IP/hostname'
    c.flag([:host], default_value: 'api.zerocracy.com')
    c.desc 'Server TCP port number'
    c.flag([:port], default_value: 443, type: Integer)
    c.desc 'Connection and read timeout in seconds'
    c.flag([:timeout], default_value: 30, type: Integer)
    c.desc 'Enable SSL connection'
    c.switch([:ssl], default_value: true)
    c.desc 'Unique identifier for the operation'
    c.flag([:owner], default_value: 'default', type: String)
    c.desc 'Number of retry attempts'
    c.flag([:retries], type: Integer, default_value: 3)
    run_it(c, 'download')
  end

  desc 'Upload a file as a durable to the server'
  command :upload do |c|
    c.desc 'Authentication token'
    c.flag([:token])
    c.desc 'Server IP/hostname'
    c.flag([:host], default_value: 'api.zerocracy.com')
    c.desc 'Server TCP port number'
    c.flag([:port], default_value: 443, type: Integer)
    c.desc 'Connection and read timeout in seconds'
    c.flag([:timeout], default_value: 30, type: Integer)
    c.desc 'Enable SSL connection'
    c.switch([:ssl], default_value: true)
    c.desc 'Unique identifier for the operation'
    c.flag([:owner], default_value: 'default', type: String)
    c.desc 'Number of retry attempts'
    c.flag([:retries], type: Integer, default_value: 3)
    run_it(c, 'upload')
  end
end

exit JudgesGLI.run(ARGV) if ENV['GLI_TESTING'].nil?
